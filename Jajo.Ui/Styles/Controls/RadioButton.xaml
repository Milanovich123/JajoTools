<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Jajo.Ui.Controls"
    xmlns:system="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Jajo.Ui;component/Assets/Brushes.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Jajo.Ui;component/Assets/Fonts.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Jajo.Ui;component/Assets/Colors.xaml" />

        <ResourceDictionary Source="pack://application:,,,/Jajo.Ui;component/Styles/Controls/DynamicSvg.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <SolidColorBrush x:Key="RadioButton.Static.Background" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="RadioButton.Static.Border" Color="#FF707070" />
    <SolidColorBrush x:Key="RadioButton.Static.Glyph" Color="#FF212121" />
    <SolidColorBrush x:Key="RadioButton.MouseOver.Background" Color="#FFF3F9FF" />
    <SolidColorBrush x:Key="RadioButton.MouseOver.Border" Color="#FF5593FF" />
    <SolidColorBrush x:Key="RadioButton.MouseOver.Glyph" Color="#FF212121" />
    <SolidColorBrush x:Key="RadioButton.Pressed.Background" Color="#FFD9ECFF" />
    <SolidColorBrush x:Key="RadioButton.Pressed.Border" Color="#FF3C77DD" />
    <SolidColorBrush x:Key="RadioButton.Pressed.Glyph" Color="#FF212121" />
    <SolidColorBrush x:Key="RadioButton.Disabled.Background" Color="#FFE6E6E6" />
    <SolidColorBrush x:Key="RadioButton.Disabled.Border" Color="#FFBCBCBC" />
    <SolidColorBrush x:Key="RadioButton.Disabled.Glyph" Color="#FF707070" />

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="2"
                        SnapsToDevicePixels="true"
                        Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        StrokeDashArray="1 2"
                        StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="14,0,0,0"
                        SnapsToDevicePixels="true"
                        Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        StrokeDashArray="1 2"
                        StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NavRadioButton" TargetType="{x:Type controls:RadioButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{StaticResource RadioButton.Static.Border}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Height" Value="50" />
        <Setter Property="Width" Value="170" />
        <Setter Property="Foreground" Value="{StaticResource White}" />
        <Setter Property="FontFamily" Value="{StaticResource AeonikPro}" />
        <Setter Property="BorderThickness" Value="0" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:RadioButton}">
                    <Grid
                        x:Name="templateRoot"
                        Background="Transparent"
                        SnapsToDevicePixels="True">

                        <Border
                            x:Name="radioButtonBorder"
                            Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="7">

                            <Grid HorizontalAlignment="Left" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="50" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>

                                <Grid
                                    Width="24"
                                    Height="24"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center">
                                    <controls:DynamicSvg
                                        Foreground="{TemplateBinding Foreground}"
                                        Style="{Binding SvgStyle, RelativeSource={RelativeSource AncestorType=controls:RadioButton}}"
                                        Visibility="Visible" />
                                </Grid>

                                <ContentPresenter
                                    x:Name="contentPresenter"
                                    Grid.Column="1"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    Focusable="False"
                                    RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    TextBlock.FontSize="16"
                                    TextBlock.Foreground="{TemplateBinding Foreground}" />

                            </Grid>

                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Cursor" Value="Hand" />
                            <Setter TargetName="radioButtonBorder" Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{StaticResource DarkBlueHoverColor}" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="radioButtonBorder" Property="Background" Value="{StaticResource RadioButton.Disabled.Background}" />
                            <Setter TargetName="radioButtonBorder" Property="BorderBrush" Value="{StaticResource RadioButton.Disabled.Border}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="radioButtonBorder" Property="Background" Value="{StaticResource RadioButton.Pressed.Background}" />
                            <Setter TargetName="radioButtonBorder" Property="BorderBrush" Value="{StaticResource RadioButton.Pressed.Border}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="radioButtonBorder" Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Opacity="0.5" Color="{StaticResource LightBlueColor}" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="radioButtonBorder" Property="Background" Value="Transparent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>



    <system:Double x:Key="RadioButtonCheckGlyphSize">12</system:Double>
    <system:Double x:Key="RadioButtonOuterEllipseSize">20</system:Double>
    <!--
    <system:Double x:Key="RadioButtonCheckGlyphPointerOverSize">14</system:Double>
    <system:Double x:Key="RadioButtonCheckGlyphPressedOverSize">10</system:Double>-->
    <system:Double x:Key="RadioButtonStrokeThickness">1</system:Double>
    <Thickness x:Key="RadioButtonPadding">8,6,0,0</Thickness>

    <Style x:Key="DefaultRadioButtonStyle" TargetType="{x:Type RadioButton}">
        <!--  Universal WPF UI focus  -->
        <Setter Property="FocusVisualStyle" Value="{DynamicResource DefaultControlFocusVisualStyle}" />
        <!--  Universal WPF UI focus  -->
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource LightBlueColor}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource BlackColor}" />
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="{StaticResource RadioButtonPadding}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="KeyboardNavigation.IsTabStop" Value="True" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="20" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid Height="32" VerticalAlignment="Top">
                            <Ellipse
                                x:Name="OuterEllipse"
                                Width="{StaticResource RadioButtonOuterEllipseSize}"
                                Height="{StaticResource RadioButtonOuterEllipseSize}"
                                Stroke="{StaticResource MainBlue}"
                                StrokeThickness="{StaticResource RadioButtonStrokeThickness}"
                                UseLayoutRounding="False">
                                <Ellipse.Fill>
                                    <SolidColorBrush Color="{StaticResource BluePressedColor}" />
                                </Ellipse.Fill>
                            </Ellipse>
                            <!--  A seperate element is added since the two orthogonal state groups that cannot touch the same property  -->
                            <Ellipse
                                x:Name="CheckOuterEllipse"
                                Width="{StaticResource RadioButtonOuterEllipseSize}"
                                Height="{StaticResource RadioButtonOuterEllipseSize}"
                                Fill="{TemplateBinding Background}"
                                Opacity="0"
                                Stroke="{TemplateBinding Background}"
                                StrokeThickness="{StaticResource RadioButtonStrokeThickness}"
                                UseLayoutRounding="False" />
                            <Ellipse
                                x:Name="CheckGlyph"
                                Width="{StaticResource RadioButtonCheckGlyphSize}"
                                Height="{StaticResource RadioButtonCheckGlyphSize}"
                                Opacity="0"
                                Stroke="{DynamicResource CircleElevationBorderBrush}"
                                UseLayoutRounding="False">
                                <Ellipse.Fill>
                                    <SolidColorBrush Color="{StaticResource MainBlueColor}" />
                                </Ellipse.Fill>
                                <Ellipse.LayoutTransform>
                                    <ScaleTransform ScaleX="1.0" ScaleY="1.0" />
                                </Ellipse.LayoutTransform>
                            </Ellipse>
                            <!--  A seperate element is added since the two orthogonal state groups that cannot touch the same property  -->
                            <Border
                                x:Name="PressedCheckGlyph"
                                Width="4"
                                Height="4"
                                BorderBrush="{StaticResource DarkBlue}"
                                CornerRadius="6"
                                Opacity="0"
                                UseLayoutRounding="False">
                                <Border.Background>
                                    <SolidColorBrush Color="{StaticResource DarkBlueColor}" />
                                </Border.Background>
                            </Border>
                        </Grid>
                        <ContentPresenter
                            x:Name="ContentPresenter"
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            TextElement.Foreground="{TemplateBinding Foreground}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="CheckGlyph"
                                            Storyboard.TargetProperty="(Ellipse.LayoutTransform).(ScaleTransform.ScaleY)"
                                            From="1.0"
                                            To="1.2"
                                            Duration="00:00:00.167" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="CheckGlyph"
                                            Storyboard.TargetProperty="(Ellipse.LayoutTransform).(ScaleTransform.ScaleX)"
                                            From="1.0"
                                            To="1.2"
                                            Duration="00:00:00.167" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="CheckGlyph"
                                            Storyboard.TargetProperty="(Ellipse.LayoutTransform).(ScaleTransform.ScaleY)"
                                            From="1.2"
                                            To="1.0"
                                            Duration="00:00:00.167" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="CheckGlyph"
                                            Storyboard.TargetProperty="(Ellipse.LayoutTransform).(ScaleTransform.ScaleX)"
                                            From="1.2"
                                            To="1.0"
                                            Duration="00:00:00.167" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CheckGlyph" Property="Opacity" Value="1.0" />
                        </MultiTrigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckGlyph" Property="Opacity" Value="1.0" />
                            <Setter TargetName="OuterEllipse" Property="Opacity" Value="0.0" />
                            <Setter TargetName="CheckOuterEllipse" Property="Opacity" Value="1.0" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="OuterEllipse"
                                            Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)"
                                            From="{StaticResource BluePressedColor}"
                                            To="{StaticResource LightBlueColor}"
                                            Duration="00:00:00.167" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="OuterEllipse"
                                            Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)"
                                            From="{StaticResource LightBlueColor}"
                                            To="{StaticResource BluePressedColor}"
                                            Duration="00:00:00.167" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CheckOuterEllipse" Property="Opacity" Value="0.86" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{StaticResource StringGray}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{StaticResource Black}" />
                            <Setter TargetName="CheckGlyph" Property="Opacity" Value="0.7" />
                            <Setter TargetName="CheckOuterEllipse" Property="Opacity" Value="0.7" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource DefaultRadioButtonStyle}" TargetType="{x:Type RadioButton}" />
</ResourceDictionary>